Approach 1:
class Solution(object):
    def getConcatenation(self, nums):
        n = len(nums)
        ans = [0] * (2 * n)

        for i in range(n, 2 * n):
            ans[i - n] = nums[i - n]      # First half
            ans[i] = nums[i - n]          # Second half

        return ans

Approach 2:
class Solution(object):
    def getConcatenation(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        n = len(nums)
        ans = [0] * (2 * n)  # Pre-allocate list with 2n positions

        for i in range(n):
            ans[i] = nums[i]        # First part
            ans[i + n] = nums[i]    # Second part

        return ans

Approach 3:

class Solution(object):
    def getConcatenation(self, nums):
        ans = []
        for i in range(len(nums)):
            ans.append(nums[i])  # First half
        for i in range(len(nums)):
            ans.append(nums[i])  # Second half
        return ans

Approach 4:

class Solution(object):
    def getConcatenation(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        
        return nums+nums
        